---
title: "In-class_Ex08"
subtitle: "Modelling, Visualizing, and Analyzing Network Data with R"
author: "Prachi Ashani"
date: 11 March 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true #to view the code chunk
  eval: true #to view the execution
  warning: false #to hide the warnings from R
  message: false
format: html
editor: visual
---

## Overview

In this exercise, wewill learn how to model, analyze and visualize network data using R. By the end of this hands-on exercise, we will be able to -

-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,

-   build network graph visualisation using appropriate functions of *ggraph*,

-   compute network geometrics using *tidygraph*,

-   build advanced graph visualisation by incorporating the network geometrics, and

-   build interactive network visualisation using *visNetwork* package.

## Getting started

### Installing and launching R packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

## The Data

### Importing the datasets

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

### Reviewing the imported data

```{r}
glimpse(GAStech_edges)
```

### Wrangling time variable(s)

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

### Wrangling other attributes

A close examination of *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualization. Hence, we will aggregate the individual by date, senders, receivers, main subject and day of the week.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

## Creating network objects using **tidygraph**

### Using tbl_graph() to build tidygraph data model

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

```{r}
GAStech_graph
```

### Changing the active object

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

## Plotting Network Data with **ggraph** package

### Plotting a basic network graph

```{r}
#| code-fold: true
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

### Changing the default network graph theme

```{r}
#| code-fold: true
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

### Changing the coloring of the plot

```{r}
#| code-fold: true
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### Fruchterman and Reingold layout

```{r}
#| code-fold: true
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

```{r}
#| code-fold: true
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### Modifying the edges

```{r}
#| code-fold: true
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

## Creating facet graphs

### Working with *facet_edges()*

```{r}
#| code-fold: true

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### Working with *facet_edges()*

```{r}
#| code-fold: true
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

## A framed facet graph

```{r}
#| code-fold: true
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### Working with *facet_nodes()*

```{r}
#| code-fold: true

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## Network Metrics Analysis

### Computing centrality indices

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness,
closeness and eigenvector.

```{r}
#| code-fold: true

g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

### Visualising network metrics

From **ggraph v2.0** onwards, tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.

```{r}
#| code-fold: true
# g <- GAStech_graph %>%
#   ggraph(layout = "fr") + 
#   geom_edge_link(aes(width=Weight), 
#                  alpha=0.2) +
#   scale_edge_width(range = c(0.1, 5)) +
#   geom_node_point(aes(colour = Department, 
#                       size = centrality_betweenness()))
# g + theme_graph()
```

### Visualising Community

tidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including *Edge-betweenness (group_edge_betweenness)*, *Leading eigenvector (group_leading_eigen)*, *Fast-greedy (group_fast_greedy)*, *Louvain (group_louvain)*, *Walktrap (group_walktrap)*, *Label propagation (group_label_prop)*, *InfoMAP (group_infomap)*, *Spinglass (group_spinglass)*, and *Optimal (group_optimal)*. Some community algorithms are designed to take into account direction or weight, while others ignore it.

In the code chunk below *group_edge_betweenness()* is used.

```{r}
#| code-fold: true

g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## Building Interactive Network Graph with visNetwork

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an \"id\" column, and the edge list must have \"from\" and \"to\" columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the \"label\" column in the node list.

-   The resulting graph is fun to play around with.

    -   You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.

    -   You can also zoom in and out on the plot and move it around to re-center it.

### Data preparation

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### Plotting the first interactive network graph

```{r}
#| code-fold: true
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### Working with a layout

```{r}
#| code-fold: true
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr")
```

### Working with visual attributes - Nodes

visNetwork() looks for a field called \"group\" in the nodes object and colour the nodes according to the values of the group field.

The code chunk below rename Department field to group.

```{r}
#| code-fold: true
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department)
```

When we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the *group* field.

```{r}
#| code-fold: true
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### Working with visual attributes - Edges

In the code run below *visEdges()* is used to symbolise the edges.\
- The argument *arrows* is used to define where to place the arrow.\
- The *smooth* argument is used to plot the edges using a smooth curve.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### Interactivity

In the code chunk below, *visOptions()* is used to incorporate interactivity features in the data visualization.\
- The argument *highlightNearest* highlights nearest when clicking a node.\
- The argument *nodesIdSelection* adds an id node selection creating an HTML select element.

```{r}
#| code-fold: true
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
