---
title: "Hands-on Exercise 3"
subtitle: "Programming Interactive Data Visualisation with R"
author: "Prachi Ashani"
date: 04 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true #to view the code chunk
  eval: true #to view the execution
  warning: false #to hide the warnings from R
format: html
editor: visual
---

## Getting Started

### Importing the libraries

```{r}
pacman::p_load(dplyr, ggiraph, ggplot2, ggthemes, ggrepel, gganimate, patchwork, hrbrthemes, plotly, DT, RColorBrewer, gridExtra, extrafont, tidyverse, gifski, gapminder, readxl, rPackedBar)
```

### Importing the dataset

Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, we import *Exam_data.csv* into R.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## Interactive Data Visualisation - ggiraph methods

-   [ggiraph](https://davidgohel.github.io/ggiraph/) is an html widget and a ggplot2 extension. It allows ggplot graphics to be interactive.

-   Interactive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/#section-interactive-geometries) that can understand three arguments:

    -   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

    -   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

    -   **Data_id**: a column of data-sets that contain an id to be associated with elements.

-   If it is used within a Shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.

### Tooltip effect with *tooltip* aesthetic

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)
```

Interactivity: By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.

### Comparing ggplot2 and ggiraph codes

The original ggplot2 code chunk.

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5, dotsize = 0.5) +
  scale_y_continuous(NULL, breaks = NULL)
```

The ggiraph code chunk.

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)
```

### Displaying multiple information on tooltip

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
exam_data$tooltip <- c(paste0("Name = ", exam_data$ID, "\n Class = ", exam_data$CLASS))

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(tooltip = exam_data$tooltip), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 8, height_svg = 8*0.618)
```

### Customising Tooltip style

Code chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by add css declarations.

```{r}
tooltip_css <- "background-color:white; font-style:bold; color:black;"

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618, options = list(opts_tooltip(css = tooltip_css))) 
```

### Displaying statistics on tooltip

In the below example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

```{r}
tooltip <- function(y, ymax, accuracy = .01) 
  {
  
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
  
  } 

gg_point <- ggplot(data=exam_data, aes(x = RACE)) +
  
  stat_summary(aes(y = MATHS, tooltip = after_stat(tooltip(y, ymax))), fun.data = "mean_se", geom = GeomInteractiveCol, fill = "light blue") +
  
  stat_summary(aes(y = MATHS), fun.data = mean_se, geom = "errorbar", width = 0.2, size = 0.2)

girafe(ggobj = gg_point, width_svg = 8, height_svg = 8*0.618)
```

### Hover effect with *data_id* aesthetic

Code chunk below show the second interactive feature of ggiraph, namely `data_id`.

**Interactivity**: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618)      
```

### Styling hover effect

In the code chunk below, css codes are used to change the highlighting effect.

Interactivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6,height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;")
                )
       )                                        
```

### Combining tooltip and hover effect

Interactivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.

```{r}
p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(tooltip = CLASS, data_id = CLASS), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
) 
```

### Click effect with **onclick**

`onclick` argument of ggiraph provides hotlink interactivity on ther web.

Interactivity: Web document link with a data object will be displayed on the web browser upon mouse click.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(onclick = onclick), stackgroups = TRUE, binwidth = 1, method = "histodot") +               
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(ggobj = p, width_svg = 6, height_svg = 6*0.618) 
```

*Note: click actions must be a string column in the dataset containing valid javascript instructions.*

### Coordinated Multiple Views with **ggiraph**

In order to build a coordinated multiple views, the following programming strategy will be used:

-   Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

-   *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package will be used inside girafe function to create the interactive coordinated multiple views.

```{r}
p1 <- ggplot(data=exam_data, aes(x = MATHS)) +
  
  geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") +  
  
  coord_cartesian(xlim=c(0,100)) +
  
  scale_y_continuous(NULL, breaks = NULL)
```

```{r}
p2 <- ggplot(data=exam_data, aes(x = ENGLISH)) +
  
  geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") + coord_cartesian(xlim=c(0,100)) +
  
  scale_y_continuous(NULL, breaks = NULL)

girafe(code = print(p1 / p2), width_svg = 6, height_svg = 6, options = list(opts_hover(css = "fill: #202020;"), opts_hover_inv(css = "opacity:0.2;"))) 
```

The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.

## Interactive Data Visualisation - plotly methods!

There are two ways to create interactive graph by using plotly, they are:

-   by using *plot_ly()*, and

-   by using *ggplotly()*

### Creating an interactive scatter plot: plot_ly() method

The code chunk below plots an interactive scatter plot by using *plot_ly()*.

```{r}
plot_ly(data = exam_data, x = ~MATHS, y = ~ENGLISH)
```

### Working with visual variable: plot_ly() method

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e.Â RACE).

Interactivity: Click on the colour symbol at the legend.

```{r}
plot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~RACE)
```

### Changing colour pallete: plot_ly() method

In the code chunk below, *colors* argument is used to change the default colour palette to [ColorBrewel](https://www.r-graph-gallery.com/38-rcolorbrewers-palettes.html) colour palette.

Interactivity: Click on the colour symbol at the legend.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = "Set1")
```

### Customising colour scheme: plot_ly() method

In the code chunk below, a customised colour scheme is created. Then, *colors* argument is used to change the default colour palette to the customised colour scheme.

Interactivity: Click on the colour symbol at the legend.

```{r}
pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE, 
        colors = pal)
```

### Customising tooltip: plot_ly() method

In the code chunk below, *text* argument is used to change the default tooltip.

Interactivity: Click on the colour symbol at the legend.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID, "<br>Class:", CLASS),
        color = ~RACE, 
        colors = "Set1")
```

### Working with layout: plot_ly() method

In the code chunk below, *layout* argument is used to change the default tooltip.

Interactivity: Click on the colour symbol at the legend.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID, "<br>Class:", CLASS),  
        color = ~RACE, 
        colors = "Set1") %>%
  
  layout(title = 'English Score versus Maths Score ',
         xaxis = list(range = c(0, 100)),
         yaxis = list(range = c(0, 100)))
```

### Creating an interactive scatter plot: ggplotly() method

The code chunk below plots an interactive scatter plot by using *ggplotly()*.

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  
  geom_point(dotsize = 1) +
  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

### Coordinated Multiple Views with **plotly**

Code chunk below plots two scatterplots and places them next to each other side-by-side by using [*subplot()*](https://plotly.com/r/subplots/) of **plotly** package.

```{r}
p1 <- ggplot(data=exam_data, 
              aes(x = MATHS,
                  y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),            
        ggplotly(p2))            
```

### Coordinated Multiple Views with **plotly**

To create a coordinated scatterplots, [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used.

Click on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

## Interactive Data Visualisation - crosstalk methods!

[Crosstalk](https://rstudio.github.io/crosstalk/) is an add-on to the htmlwidgets package. It extends html widgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

### Interactive Data Table: DT package

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)

-   Data objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).

```{r}
DT::datatable(exam_data, class= "compact")
```

### Linked brushing: crosstalk method

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)
```

## Animated Data Visualization: gganimate methods

[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customize how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

-   `view_*()` defines how the positional scales should change along the animation.

-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### Getting started

Add the following packages in the packages list:

-   [**gganimate**](https://gganimate.com/): An ggplot extension for creating animated statistical graphs.

-   [**gifski**](https://cran.r-project.org/web/packages/gifski/) converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.

### Importing the data

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.

-   `mutate_each_()` of dplyr package is used to convert all character data type into factor.

-   `mutate` of dplyr package is used to convert data values of Year field into integer.

### Building a static population bubble plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### Building the animated bubble plot

In the code chunk below,

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e.Â Year).

-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       #<<
  ease_aes('linear')            #<<         
```

## Visualizing Large Data Interactively

For the purpose of this hands-on exercise, two data sets will be used. They are:

-   *GDP.csv* provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from [World Development Indicators Database](https://databank.worldbank.org/source/world-development-indicators) of World Bank.

-   *WorldCountry.csv* provides a list of country names and the continent they belong to extracted from [Statistics Times](https://statisticstimes.com/geography/countries-by-continents.php).

-   Write a code chunk to import both data sets by using `read_csv()` of **readr** package.

```{r}
GDP <- read_csv("data/GDP.csv")
WorldCountry <- read_csv("data/WorldCountry.csv")
```

### Data preparation

Before programming the data visualization, it is important for us to reshape, wrangle and transform the raw data to meet the data visualization need.

Code chunk below performs following tasks:

-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) of dplyr package is used to convert all values in the 202 field into numeric data type.

-   [`select()`](https://dplyr.tidyverse.org/reference/select.html) of dplyr package is used to extract column 1 to 3 and Values field.

-   [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) of tidyr package is used to split the values in Series Name field into columns.

-   [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.

```{r}
GDP_selected <- GDP %>%
  mutate(Values = as.numeric(`2020`)) %>%
  select(1:3, Values) %>%
  pivot_wider(names_from = `Series Name`,
              values_from = `Values`) %>%
  left_join(y=WorldCountry, by = c("Country Code" = "ISO-alpha3 Code"))
```

### Introducing packed bar method

-   **packed bar** is a relatively new data visualization method introduced by Xan Gregg from JMP.

-   It aims to support the need of visualising skewed data over hundreds of categories.

-   The idea is to support the [Focus+Context](https://infovis-wiki.net/wiki/Focus-plus-Context) data visualization principle.

-   Visit this [JMP Blog](https://community.jmp.com/t5/JMP-Blog/Introducing-packed-bars-a-new-chart-form/ba-p/39972) to learn more about the design principles of packed bar.

### Data Preparation

```{r}
GDP_selected <- GDP %>%
  mutate(GDP = as.numeric(`2020`)) %>%
  filter(`Series Name` == "GDP (current US$)") %>%
  select(1:2, GDP) %>%
  na.omit()
```

### Building a packed bar by using rPackedBar package

In the code chunk below, `plotly_packed_bar()` of [rPackedBar](https://cran.r-project.org/web/packages/rPackedBar/) package is used to create an interactive packed bar.

```{r}
p = plotly_packed_bar(
  input_data = GDP_selected,
  label_column = "Country Name",
  value_column = "GDP",
  number_rows = 10,
  plot_title = "Top 10 countries by GDP, 2020",
  xaxis_label = "GDP (US$)",
  hover_label = "GDP",
  min_label_width = 0.018,
  color_bar_color = "#00aced",
  label_color = "white")
plotly::config(p, displayModeBar = FALSE)
```
