---
title: "Hands-on Exercise 2"
subtitle: "Creating Elegant Graphics with ggplot2"
author: "Prachi Ashani"
date: 09 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true #to view the code chunk
  eval: true #to view the execution
  warning: false #to hide the warnings from R
format: html
editor: visual
---

## Getting Started

### Installing and loading the required libraries

-   Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.

```{r}
pacman::p_load(tidyverse, patchwork, ggthemes, ggrepel, hrbrthemes)
```

### Importing data

-   The code chunk below imports *exam_data.csv* into R environment using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv('data/Exam_data.csv')
```

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## Beyond ggplot2 Annotation

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = 'lm', size = 0.5) +
  geom_label(aes(label = ID), hjust = 0.5, vjust = -0.5) +
  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +
  ggtitle("English Scores vs Maths Scores for Primary 3")
```

### Working with ggrepel

ggrepel is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text. We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = 'lm', size = 0.5) +
  geom_label_repel(aes(label = ID), hjust = 0.5, vjust = -0.5) +
  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +
  ggtitle("English Scores vs Maths Scores for Primary 3")
```

## Beyond ggplot2 Themes

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

```{r}
ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") +
  theme_gray() +
  ggtitle("Distribution of Math Scores")
```

### Working with ggtheme package

ggthemes provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

```{r}
ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") +
  theme_economist() +
  ggtitle("Distribution of Math Scores")
```

### Working with ggtheme package

hrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r}
ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") +
  theme_ipsum() +
  ggtitle("Distribution of Math Scores")
```

We use -

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15, and

-   `grid` argument is used to remove the x-axis grid lines.

```{r}
ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") +
  ggtitle("Distribution of Math Scores") +
  theme_ipsum(axis_title_size = 18, base_size = 15, grid = "Y")
```

## Beyond ggplot2 facet

In this section, we learn how to create composite plot by combining multiple graphs. First, lets create three statistical graphics.

```{r}
p1 <- ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") + 
  coord_cartesian(xlim = c(0,100)) +
  ggtitle("Distribution of Maths scores")

p2 <- ggplot(data = exam_data, aes(x = ENGLISH)) +
  geom_histogram(bins = 20, boundary = 100, color = "grey25", fill = "grey90") + 
  coord_cartesian(xlim = c(0,100)) +
  ggtitle("Distribution of English scores")

p3 <- ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = "lm", size = 0.5) + 
  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +
  ggtitle("English Scores vs Maths Scores for Primary 3")
```

### Creating Composite Graphics: pathwork methods

It is not unusual that somtimes multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose figure with multiple graphs. In this section, we use [**patchwork**](https://patchwork.data-imaginist.com/index.html). Patchwork package has a very simple syntax where we can create layouts easily. Here's the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign `\`

```{r}
p1 + p2 / p3
```

\| will place the plots beside each other, while / will stack them.

```{r}
(p1 / p2) | p3
```

**patchwork** also provides auto-tagging capabilities, in order to identify subplots in text.

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

Plotting **patchwork** with **ggtheme**

```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

Besides providing functions to place plots next to each other based on the provided layout, with [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots and graphic elements freely on top or below another plot.

```{r}
p3 + inset_element(p2, left = 0.02, bottom = 0.7, right = 0.5, top = 1)
```
